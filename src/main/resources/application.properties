########################config sqlserver########################

#spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=dbIFI_SOLUTION
#spring.datasource.username=sa
#spring.datasource.password=240697
#spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
##springjpa
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect


######################config mysql docker#########################
#
server.port=8081
spring.datasource.url=jdbc:mysql://localhost:3306/dbIFI_PROJECT?autoReconnect=true&useSSL=true
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jackson.serialization.fail-on-empty-beans=false

#
########################config h2 database##########################
#server.port=8081
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=sa
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
## Enabling H2 Console
#spring.h2.console.enabled=true


#########################config security rest#######################
#rest.security.enabled=true
#rest.security.api-matcher=/api/**
#rest.security.cors.allowed-origins=*
#rest.security.cors.allowed-headers=*
#rest.security.cors.allowed-methods=GET,POST,PUT,PATCH,DELETE,OPTIONS
#rest.security.cors.max-age=3600
#
#	### Properties to secure REST Endpoints using OAuth2 Resource Server ###
#rest.security.issuer-uri=http://localhost:8080/auth/realms/dev
#security.oauth2.resource.id=employee-service
#security.oauth2.resource.token-info-uri=http://localhost:8080/auth/realms/dev/protocol/openid-connect/token/introspect
#security.oauth2.resource.user-info-uri=http://localhost:8080/auth/realms/dev/protocol/openid-connect/userinfo
#security.oauth2.resource.jwt.key-value=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmHDMAtCqhvIJwg5DWnoDhcnTkj/t44Qi9NDhzdI1mbJFFpOqjxc58kzQqVYUpCACqDIGSa8lvpQyC1+h77A/hMF4sTXESj9Yqk4JDAfJoYFAreLrMMXBvFmEHQaDii90LiTALBmXOLYaDmHyuC7NO+iiR891C/rTOeohnwvEqbWzh/GTNR3PXWilG+h9QXVE4g+XM4YvPKzsTlh/zWnqVreizu1o6PYSeWLWIePC6/4DlH26PJpjoEXvzKw6eliSvaqUBE9IZx7SqYSocm/UGlhbHbqvq4TJNgkIrBQYWWsmiwyY8+OjaUz1z0aOuFFcZ1GDSahLuDL08gRcB8ACpwIDAQABs
#
#	### Properties to call another micro-service (Service Accounts) ###
#security.oauth2.client.client-id=employee-service
#security.oauth2.client.client-secret=763b8623-4a11-4d2f-83e1-08b12e4167d1
#security.oauth2.client.user-authorization-uri=http://localhost:8080/auth/realms/dev/protocol/openid-connect/auth
#security.oauth2.client.access-token-uri=http://localhost:8080/auth/realms/dev/protocol/openid-connect/token
#security.oauth2.client.scope=openid
#security.oauth2.client.grant-type=client_credentials

keycloak.realm                      = dev
keycloak.auth-server-url            = http://localhost:8080/auth
keycloak.ssl-required               = external
keycloak.resource                   = springboot-microservice
keycloak.credentials.secret         = 18abea1f-c7d7-40d0-8b11-af2f5b6f5e62
keycloak.use-resource-role-mappings = true
keycloak.bearer-only                = true
keycloak.public-client=true

